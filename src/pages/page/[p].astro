---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import HomeHeader from "../../components/HomeHeader.astro";
import MaxWidthContainer from "../../components/MaxWidthContainer.astro";
import PostItem from "../../components/PostItem.astro";

export const getStaticPaths = (async () => {
  const posts = await getCollection("post");
  const countPerPage = 10;
  const pageSize = Math.ceil(posts.length / countPerPage);
  const chunked = Array.from({ length: pageSize }, (_, i) =>
    posts
      .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
      .slice(i * countPerPage, i * countPerPage + countPerPage)
  );

  return chunked.map((chunk, index) => ({
    params: { p: (index + 1).toString() },
    props: {
      chunk,
      hasPrev: index - 1 >= 0,
      hasNext: index + 1 < chunked.length,
      page: index + 1,
    },
  }));
}) satisfies GetStaticPaths;

const { chunk, hasNext, hasPrev, page } = Astro.props;
---

<html lang="ja">
  <head>
    <BaseHead title={""} description={""} />
  </head>
  <body>
    <HomeHeader />
    <MaxWidthContainer>
      <main>
        <section>
          {
            chunk.map((post) => (
              <PostItem
                title={post.data.title}
                date={post.data.date}
                slug={post.slug}
              />
            ))
          }
        </section>
        {
          (hasPrev || hasNext) && (
            <div class="links">
              {hasPrev && (
                <a href={`/page/${page - 1}`} class="link">
                  前へ
                </a>
              )}
              {hasNext && (
                <a href={`/page/${page + 1}`} class="link">
                  次へ
                </a>
              )}
            </div>
          )
        }
      </main>
    </MaxWidthContainer>
    <Footer />
    <style>
      .links {
        display: flex;
        gap: 12px;
        margin: 48px 0;
      }
      .link {
        text-decoration: none;
        border: 1px solid rgb(229 231 235);
        padding: 8px 16px;
        transition: border-color 0.2s linear;
      }
      .link:hover {
        border-color: rgb(209 213 219);
      }
    </style>
  </body>
</html>
