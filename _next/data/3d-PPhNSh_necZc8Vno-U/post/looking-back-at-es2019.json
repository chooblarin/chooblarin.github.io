{"pageProps":{"postContent":{"title":"ES2019を振り返る","date":"2019-11-27T22:32:00+09:00","slug":"looking-back-at-es2019","tags":["JavaScript"],"draft":false,"content":"<p>今年も残すところあと一ヶ月となりましたね。この記事では ES2019 の新機能をユースケースと共に振り返ってみます。</p>\n<h3><code>Array.prototype.flat</code></h3>\n<p><code>Array.prototype.flat()</code> は入れ子になった配列の要素を再帰的に辿って結合した配列を新たにつくります。引数には，何階層まで辿るか（depth）指定します。デフォルトは depth = 1 です。</p>\n<pre><code>> <span>const</span> array = [<span>\"零\"</span>, [<span>\"壱\"</span>], [[<span>\"弐\"</span>], [[<span>\"参\"</span>]]]];\n> array.<span>flat</span>()\n[<span>\"零\"</span>, <span>\"壱\"</span>, [<span>\"弐\"</span>], [[<span>\"参\"</span>]]]\n\n> array.<span>flat</span>(<span>2</span>)\n[<span>\"零\"</span>, <span>\"壱\"</span>, <span>\"弐\"</span>, [<span>\"参\"</span>]]\n\n> array.<span>flat</span>(<span>3</span>)\n[<span>\"零\"</span>, <span>\"壱\"</span>, <span>\"弐\"</span>, <span>\"参\"</span>]\n\n> array.<span>flat</span>(<span>10</span>) <span>// 多めにdepthを指定</span>\n[<span>\"零\"</span>, <span>\"壱\"</span>, <span>\"弐\"</span>, <span>\"参\"</span>]\n\n> array.<span>flat</span>(<span>0</span>) <span>// depth = 0 は何も変更しない</span>\n[<span>\"零\"</span>, [<span>\"壱\"</span>], [[<span>\"弐\"</span>], [[<span>\"参\"</span>]]]]</code></pre>\n<p><code>.flat()</code> と同等の効果を得る関数は，<code>.reduce()</code> と <code>.concat()</code> と再帰処理を組み合わせることで簡単に実装することができます。</p>\n<pre><code><span>const</span> <span>flatten</span> = (<span>array, depth = <span>1</span></span>) =>\n  array.<span>reduce</span>(\n    <span>(<span>acc, val</span>) =></span>\n      acc.<span>concat</span>(\n        depth > <span>1</span> &#x26;&#x26; <span>Array</span>.<span>isArray</span>(val) ? <span>flatten</span>(val, depth - <span>1</span>) : val\n      ),\n    []\n  );</code></pre>\n<h3><code>Array.prototype.flatMap</code></h3>\n<p><code>Array.prototype.flatMap()</code> は前述の <code>.map()</code> と <code>.flat()</code> の組み合わせです。すなわち</p>\n<pre><code>array.<span>flatMap</span>(func);</code></pre>\n<p>と</p>\n<pre><code>array.<span>map</span>(func).<span>flat</span>(<span>1</span>);</code></pre>\n<p>は等価です。ここで <code>func</code> は関数で，シグネチャは</p>\n<pre><code>(<span>value</span>: T, <span>index</span>: number, <span>array</span>: T[]) => U | <span>Array</span>&#x3C;U></code></pre>\n<p>です。<code>func</code> が恒等関数 <code>(x) => x</code> のときは<code>.flat()</code> と相当です。すなわち，<code>array.flatMap(x => x)</code> と <code>array.flat()</code> は等価です。</p>\n<pre><code>> <span>const</span> <span>duplicate</span> = (<span>x</span>) => ([x, x])\n\n> <span>duplicate</span>(<span>\"👽\"</span>)\n[<span>\"👽\"</span>, <span>\"👽\"</span>]\n\n> [<span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>].<span>map</span>(duplicate)\n[[<span>\"👽\"</span>, <span>\"👽\"</span>], [<span>\"👽\"</span>, <span>\"👽\"</span>], [<span>\"👽\"</span>, <span>\"👽\"</span>]]\n\n> [<span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>].<span>flatMap</span>(duplicate)\n[<span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>, <span>\"👽\"</span>]</code></pre>\n<p>また，<code>.flatMap()</code> を使うと，<code>.map()</code> と <code>.filter()</code> の効果を同時に得ることができます。</p>\n<pre><code>> <span>const</span> list = [\n  { <span>name</span>: <span>\"Batman\"</span> },\n  { <span>name</span>: <span>\"Jorker\"</span>, <span>isVillain</span>: <span>true</span> },\n  { <span>name</span>: <span>\"Gordon\"</span> },\n  { <span>name</span>: <span>\"Alfred\"</span> },\n  { <span>name</span>: <span>\"Harvey\"</span> }\n];\n\n> list.<span>flatMap</span>(<span><span>v</span> =></span> v.<span>isVillain</span> ? [] : v.<span>name</span>) <span>// ヴィラン以外の名前一覧が欲しい</span>\n[<span>\"Batman\"</span>, <span>\"Gordon\"</span>, <span>\"Alfred\"</span>, <span>\"Harvey\"</span>]</code></pre>\n<h3><code>Object.fromEntries()</code></h3>\n<p><code>Object.fromEntries()</code> は <code>[key, value]</code> のペアの配列からオブジェクトをつくります。</p>\n<pre><code>> <span>const</span> pairs = [[<span>\"Apple\"</span>, <span>\"🍎\"</span>], [<span>\"Banana\"</span>, <span>\"🍌\"</span>], [<span>\"Candy\"</span>, <span>\"🍬\"</span>]];\n> <span>Object</span>.<span>fromEntries</span>(<span>pairs</span>)\n{ <span>\"Apple\"</span>: <span>\"🍎\"</span>, <span>\"Banana\"</span> :<span>\"🍌\"</span>, <span>\"Candy\"</span>: <span>\"🍬\"</span> }</code></pre>\n<p><code>key</code> が重複していた場合，配列の後ろ側の値になります。</p>\n<pre><code>> <span>Object</span>.<span>fromEntries</span>(<span>[\n  [<span>\"Apple\"</span>, <span>\"🍎\"</span>],\n  [<span>\"Banana\"</span>, <span>\"🍌\"</span>],\n  [<span>\"Candy\"</span>, <span>\"🍬\"</span>],\n  [<span>\"Candy\"</span>, <span>\"🍭\"</span>],\n  [<span>\"Apple\"</span>, <span>\"🍏\"</span>]\n]</span>)\n{ <span>\"Apple\"</span>: <span>\"🍏\"</span>, <span>\"Banana\"</span>: <span>\"🍌\"</span>, <span>\"Candy\"</span>: <span>\"🍭\"</span> }</code></pre>\n<h3><code>String.prototype.{trimStart,trimEnd}</code></h3>\n<p><code>.trim()</code> は両端のホワイトスペースを取り除きますが，<code>.trimStart()</code> と <code>.trimEnd()</code> はそれぞれ，始端，終端のみに作用します。</p>\n<pre><code>> <span>\"   (^-^)   \"</span>.<span>trim</span>()\n<span>\"(^-^)\"</span>\n\n> <span>\"   (^-^)   \"</span>.<span>trimStart</span>()\n<span>\"(^-^)   \"</span>\n\n> <span>\"   (^-^)   \"</span>.<span>trimEnd</span>()\n<span>\"   (^-^)\"</span></code></pre>\n<h3><code>Symbol.prototype.description</code></h3>\n<p><code>Symbol</code> を作成するとき，ファクトリ関数に任意の文字列を渡すことが出来ます。</p>\n<pre><code>> <span>const</span> symbol = <span>Symbol</span>(<span>\"これはシンボルです\"</span>)\n> <span>String</span>(symbol)\n<span>\"Symbol(これはシンボルです)\"</span></code></pre>\n<p>これまで，その値を取得するには上記のように文字列に変換するしかありませんでしたが， <code>description</code> という getter でアクセスできるようになりました。</p>\n<pre><code>> symbol.<span>description</span>\n<span>\"これはシンボルです\"</span></code></pre>\n<h3>Optional catch binding</h3>\n<p>この提案により，以下のような書き方ができるようになりました。</p>\n<pre><code><span>try</span> {\n  <span>valus</span>(); <span>// バルス！</span>\n} <span>catch</span> {\n  <span>// 何かするが，errorオブジェクトは使わなくていい</span>\n}</code></pre>\n<p>エラーを揉み消したいとき（推奨はしませんが）や，どんなエラーをキャッチするのか自明なときに便利になります。</p>\n<pre><code><span>let</span> result;\n<span>try</span> {\n  result = <span>JSON</span>.<span>parse</span>(str);\n} <span>catch</span> {\n  result = defaultValue;\n}</code></pre>\n<h3>Stable Array.prototype.sort()</h3>\n<p><code>Array.prototype.sort()</code> の挙動が安定しました。</p>\n<pre><code>> <span>const</span> prices = [\n  { <span>name</span>: <span>\"Apple\"</span>, <span>price</span>: <span>150</span> },\n  { <span>name</span>: <span>\"Banana\"</span>, <span>price</span>: <span>100</span> },\n  { <span>name</span>: <span>\"Broccoli\"</span>, <span>price</span>: <span>100</span> },\n  { <span>name</span>: <span>\"Corn\"</span>, <span>price</span>: <span>120</span> }\n];\n> heroes.<span>sort</span>(<span>(<span>a, b</span>) =></span> a.<span>price</span> - b.<span>price</span>)\n\n[\n  { <span>name</span>: <span>\"Banana\"</span>, <span>price</span>: <span>100</span> },\n  { <span>name</span>: <span>\"Broccoli\"</span>, <span>price</span>: <span>100</span> },\n  { <span>name</span>: <span>\"Corn\"</span>, <span>price</span>: <span>120</span> },\n  { <span>name</span>: <span>\"Apple\"</span>, <span>price</span>: <span>150</span> }\n]</code></pre>\n<p>この例では，アルファベット順にソートされた配列を価格で昇順にソートした例です。これまでは，同じ価格のアイテムがあった場合にその順番がアルファベット順になっていることが保証されていませんでした。この度，<code>.sort()</code> を実行する前の順序が保存されたままソートされるようになりました。</p>\n<h3>その他</h3>\n<p>その他，以下のような変更がありました。</p>\n<ul>\n<li>Well-formed JSON.stringify</li>\n<li>JSON superset</li>\n<li>Function.prototype.toString revision</li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=1_hHxra0Lf4\">ES2019 Features: What Even Are They? by Tara Z. Manicsic | JSConf EU 2019 - YouTube</a></li>\n</ul>\n"}},"__N_SSG":true}