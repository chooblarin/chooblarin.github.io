{"pageProps":{"postContent":{"title":"ダークモードに対応する","date":"2020-12-01T00:00:00+00:00","slug":"dark-mode-support-for-nextjs","tags":["Blog","JavaScript"],"draft":false,"content":"<p>この記事は<a href=\"https://adventar.org/calendars/5034\">フラー Advent Calendar 2020</a> の1日目の記事です。</p>\n<p>先日，Next.jsに移行した本ブログにダークモード (dark mode) 対応を追加しました。</p>\n<h2>基本の知識</h2>\n<p>ユーザーの端末がOSで設定している値を参照するには，<code>prefers-color-scheme</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\">*</a> というCSSメディアを参照します。CSSの一例を以下に示します。</p>\n<pre><code><span>@media</span> (<span>prefers-color-scheme</span>: dark) {\n  <span>/* ダークモードのスタイルを追加する */</span>\n  <span>body</span> {\n    <span>color</span>: white;\n    <span>background</span>: black;\n  }\n}\n<span>@media</span> (<span>prefers-color-scheme</span>: light) {\n  <span>/* ライトモードのスタイルを追加する */</span>\n  <span>body</span> {\n    <span>color</span>: black;\n    <span>background</span>: yellow;\n  }\n}</code></pre>\n<p>CSSのスタイルを全て <code>prefers-color-scheme</code> のメディアクエリで切り替えればこれで良いです。しかし実際にはJavaScriptのプログラムで色テーマを制御したい場合も少なくありません。JavaScriptからアクセスするには以下のようにします。</p>\n<pre><code><span>if</span> (<span>window</span>.<span>matchMedia</span>(<span>\"(prefers-color-scheme: dark)\"</span>).<span>matches</span>) {\n  <span>// ダークモードのときの処理</span>\n}</code></pre>\n<h2>Next.js とダークモード対応</h2>\n<p>先述の <code>prefers-color-scheme</code> を用いて，以下のような関数を定義したとします。</p>\n<pre><code><span>function</span> <span>getPreferredColorScheme</span>(<span></span>) {\n  <span>const</span> mql = <span>window</span>.<span>matchMedia</span>(<span>\"(prefers-color-scheme: dark)\"</span>);\n  <span>return</span> mql.<span>matches</span> ? <span>\"dark\"</span> : <span>\"light\"</span>;\n}</code></pre>\n<p>しかしNext.jsのアプリケーションではReactコンポーネントでこの関数を実行するとエラーになってしまいます。Next.jsはビルド時にプリレンダリングを行うので，Nodeの環境で <code>window</code> オブジェクトに参照しようとして <code>ReferenceError</code> になってしまうのです。</p>\n<p>この問題を回避する方法を調べてみたところ，以下のブログ記事にとても詳しくまとまっていました（Gatsbyでの回避策ですが，根本的な問題は同じです）。</p>\n<ul>\n<li><a href=\"https://www.joshwcomeau.com/react/dark-mode/\">\"How to add dark mode to a Gatsby site\"</a></li>\n</ul>\n<p>また，以下のようなダークモード対応を簡単にするためのReact Hookライブラリも存在します。（これを使用して対応しても良かったのですが，せっかくなので自分で実装してみることにします。）</p>\n<ul>\n<li><a href=\"https://github.com/donavon/use-dark-mode\">\"donavon/use-dark-mode: A custom React Hook to help you implement a \"dark mode\" component.\"</a></li>\n</ul>\n<p>この2つの実装方法を参考にして，本ブログのダークモード対応を行いました。</p>\n<h3>flashを防止する</h3>\n<p>先に述べた通り，Next.jsが静的ページを生成する時点では，\"dark\" と \"light\" のどちらのテーマでプリレンダリングを実行すれば良いのかがわかりません。一時的に \"light\" テーマでページを生成し，クライアント側の情報を取得してからテーマの色をセットするのでは，一瞬正しくない色がチラついて表示されてしまいます。</p>\n<p>そこで，以下の手順でこれを回避します。</p>\n<ul>\n<li>CSS Variablesを使ったスタイルでプリレンダリング</li>\n<li>クライアントでページがロードされてから即座に実行するスクリプトを定義</li>\n<li>そのスクリプトで \"dark\" か \"light\" を判定してCSS Variablesをセットする</li>\n</ul>\n<p>まず最初に以下のようなスタイルを追加します。</p>\n<pre><code><span>body</span> {\n  <span>color</span>: <span>var</span>(--color-text);\n  <span>background</span>: <span>var</span>(--color-background);\n}</code></pre>\n<p>次に，カラーテーマを判別するためにクライアント側でのみ実行するスクリプト <code>ColorThemeScript</code> を作成します。</p>\n<pre><code><span>const</span> <span>ColorThemeScript</span>: <span>React</span>.<span>FC</span> = <span>() =></span> (\n  <span><span>&#x3C;<span>script</span>\n    <span>dangerouslySetInnerHTML</span>=<span>{{</span>\n      <span>__html:</span> `\n      (<span>function</span>() {\n        <span>var</span> <span>preferDarkQuery</span> = <span>'(prefers-color-scheme: dark)'</span>;\n        <span>var</span> <span>mql</span> = <span>window.matchMedia(preferDarkQuery);</span>\n\n        <span>...</span>\n\n        <span>var</span> <span>colorMode</span> = <span>getInitialColorMode();</span>\n        <span>setThemeColors</span>(<span>colorMode</span>);\n      })();\n    `,\n    }}\n  /></span></span>\n);</code></pre>\n<p>このスクリプトは先ほど紹介した <a href=\"https://github.com/donavon/use-dark-mode/blob/29590271bb3a74f08975181c5ed68bd5a210ef83/noflash.js.txt\">donavon/use-dark-mode</a> から拝借します。</p>\n<p>そしてNext.jsのカスタムドキュメント (<code>_document</code>) に <code>&#x3C;ColorThemeScript /></code> を挿入します。</p>\n<pre><code><span>export</span> <span>default</span> <span>class</span> <span>CustomDocument</span> <span>extends</span> <span>Document</span> {\n  <span>render</span>(<span></span>) {\n    <span>return</span> (\n      <span><span>&#x3C;<span>Html</span>></span>\n        <span>&#x3C;<span>Head</span> /></span>\n        <span>&#x3C;<span>body</span>></span>\n          {/* bodyタグの先頭に挿入する */}\n          <span>&#x3C;<span>ColorThemeScript</span> /></span>\n          <span>&#x3C;<span>Main</span> /></span>\n          <span>&#x3C;<span>NextScript</span> /></span>\n        <span>&#x3C;/<span>body</span>></span>\n      <span>&#x3C;/<span>Html</span>></span></span>\n    );\n  }\n}</code></pre>\n<p>クライアント側では <code>ColorThemeScript</code> のスクリプトによって決定した情報をReact.Contextに保存してアクセスできるようにします。この実装は先ほど紹介したブログ記事 <a href=\"https://www.joshwcomeau.com/react/dark-mode/\">\"How to add dark mode to a Gatsby site\"</a> のコードを参考にしました。</p>\n<pre><code><span>const</span> <span>ColorThemeContext</span> = <span>React</span>.<span>createContext</span>&#x3C;<span>ColorTheme</span>>(<span>undefined</span>);\n\n<span>const</span> <span>ColorThemeProvider</span>: <span>React</span>.<span>FC</span> = <span>(<span>{ children }</span>) =></span> {\n  <span>const</span> [colorMode, setColorMode] = <span>React</span>.<span>useState</span>(<span>undefined</span>);\n  <span>React</span>.<span>useEffect</span>(<span>() =></span> {\n    <span>const</span> root = <span>window</span>.<span>document</span>.<span>documentElement</span>;\n    <span>const</span> initialColorValue = root.<span>style</span>.<span>getPropertyValue</span>(\n      <span>\"--initial-color-mode\"</span>\n    );\n    <span>setColorMode</span>(initialColorValue);\n  }, []);\n\n  <span>const</span> <span>changeColorMode</span> = (<span>mode: <span>string</span></span>) => {\n    ...\n  }\n\n  <span>return</span> (\n    <span><span>&#x3C;<span>ColorThemeContext.Provider</span> <span>value</span>=<span>{{</span> <span>colorMode</span>, <span>changeColorMode</span> }}></span>\n      {children}\n    <span>&#x3C;/<span>ColorThemeContext.Provider</span>></span></span>\n  );\n};</code></pre>\n<p><code>ColorThemeProvider</code> はNext.jsのカスタムApp (<code>_app</code>) に追加します。</p>\n<pre><code><span>function</span> <span>App</span>(<span>{ Component, pageProps }: AppProps</span>) {\n  ...\n  <span>return</span> (\n    <span><span>&#x3C;<span>ColorThemeProvider</span>></span>\n      <span>&#x3C;<span>Component</span> {<span>...pageProps</span>} /></span>\n    <span>&#x3C;/<span>ColorThemeProvider</span>></span></span>\n  );\n}</code></pre>\n<p>これで対応は完了です。</p>\n<h2>まとめ</h2>\n<p>CSS Variablesを使ってダークモードに対応しました。ユーザーがトグルスイッチで明示的に切り替えたテーマはlocalStorageに保存しており，次回以降のサイト訪問時には優先的に選択されるように実装しています。</p>\n<p>最初はlocalStorageの代わりにIndexedDBを使おうと考えたのですが，非同期処理が面倒だったので辞めました。パフォーマンスにはほぼ影響無いと思いますが，実装方法の良いアイディアを見つけたら挑戦してみたいと思います。</p>\n<p>余談ですが，ユーザーのOS設定 (<code>prefers-color-scheme</code> で取得できる値) を参照しているのだからUIで切り替える機能は不要だという意見もあるようです。ところがFirefoxのfingerprinting対策オプション <a href=\"https://wiki.mozilla.org/Security/Fingerprinting#Terse_List:~:text=prefers%2Dcolor%2Dscheme%20always%20says%20light%20mode.\">*</a> が有効になっていると，この値は常に \"light\" モードとして上書きされるようで，カラーテーマ切り替えのUIがあっても良いのかも知れません。</p>\n"}},"__N_SSG":true}