{"pageProps":{"postContent":{"title":"ElixirでMIDIファイルをパースする","date":"2017-08-26T23:28:44+09:00","slug":"parsing-midi-by-elixir","tags":["Elixir"],"draft":false,"content":"<h2>動機</h2>\n<p><a href=\"https://chooblarin.github.io/post/trying-beat-detection/\">前回のエントリ</a>では，音楽に合わせて何か絵を動かそうとして beat detection を行いましたが，事前に音に関する情報を分析するアプローチにも挑戦して見たいと思っていたところ，MIDI ファイルなら Elixir の勉強に丁度良いかもと思いついてこの記事を書きました．</p>\n<h2>MIDI</h2>\n<p>MIDI は音の情報の形式の一つです．MIDI の最も一般的なファイルが SMF(Standard MIDI Format)です．以降，SMF のファイルを単に「MIDI ファイル」と表記します．</p>\n<h2>Elixir</h2>\n<p>Elixir のパターンマッチは素晴らしいです．バイナリもパターンマッチ出来ます．</p>\n<pre><code class=\"hljs language-elixir\">iex(1)> &#x3C;&#x3C;header :: 8, data :: binary>> = &#x3C;&#x3C;1, 2, 3, 4, 5>>\n&#x3C;&#x3C;1, 2, 3, 4, 5>>\niex(2)> header\n1\niex(3)> data\n&#x3C;&#x3C;2, 3, 4, 5>>\n</code></pre>\n<h2>やってみる</h2>\n<p><a href=\"https://maruyama.breadfish.jp/tech/smf\">こちらを</a>参考に MIDI ファイルの中身を覗いてみる．</p>\n<p>まず，MIDI ファイルを読み込みます．</p>\n<pre><code class=\"hljs language-elixir\">iex(1) {:ok, data} = File.read 'sample.midi'\n{:ok,\n &#x3C;&#x3C;77, 84, 104, 100, 0, 0, 0, 6, 0, 1, 0, 20, 1, 224, 77, 84, 114, 107, 0, 0, 0,\n   36, 0, 255, 3, 3, 82, 101, 105, 0, 255, 81, 3, 7, 161, 32, 0, 255, 88, 4, 4,\n   2, 24, 8, 143, 143, 0, 255, 88, ...>>}\n</code></pre>\n<p>バイナリさんこんにちわ．MIDI ファイルは必ずヘッダチャンクとトラックチャンクで構成されています．</p>\n<h3>ヘッダ</h3>\n<p>ヘッダを覗いてみます．ヘッダのチャンク構成は以下のようになっています．括弧の数字はバイト数です．</p>\n<p><em>&#x3C;\"MThd\"> &#x3C;データ長 (4)> &#x3C;フォーマット (2)> &#x3C;トラック数 (2)> &#x3C;時間単位 (2)></em></p>\n<p>パターンマッチを使うと一発でヘッダをパース出来ます．</p>\n<pre><code class=\"hljs language-elixir\">iex(2)> &#x3C;&#x3C;\"MThd\", 6 :: size(32), format :: size(16), num_of_tracks :: size(16), time_unit :: size(16), rest :: binary>> = data\n&#x3C;&#x3C;77, 84, 104, 100, 0, 0, 0, 6, 0, 1, 0, 20, 1, 224, 77, 84, 114, 107, 0, 0, 0,\n  36, 0, 255, 3, 3, 82, 101, 105, 0, 255, 81, 3, 7, 161, 32, 0, 255, 88, 4, 4,\n  2, 24, 8, 143, 143, 0, 255, 88, 4, ...>>\n\niex(3)> format\n1\niex(4)> num_of_tracks\n20\niex(5)> time_unit\n480\n</code></pre>\n<p>フォーマット 1，トラック数 20，時間単位 480 のようです．MIDI ファイルのフォーマットは\"0\", \"1\", \"2\"の 3 種類が定義されています．フォーマット 1 はトラック構成を保存したフォーマットです (後にみていくと分かります)．このファイルは 20 トラックの情報を含んでいます．時間単位 480 の意味は，四分音符の分解能が 480 という意味です．よくわからなくても気にせずに進みます．</p>\n<p>ここで<code>MidiParser</code>という module を定義しておきます．</p>\n<pre><code class=\"hljs language-elixir\">defmodule MidiParser do\n\n  def parse_header(&#x3C;&#x3C;\n  \"MThd\",\n  6 :: size(32),\n  format :: size(16),\n  num_of_tracks :: size(16),\n  time_unit :: size(16),\n  _ :: binary>>) do\n\n  IO.puts \"format: #{format}\"\n  IO.puts \"number of tracks: #{num_of_tracks}\"\n  IO.puts \"time unit: #{time_unit}\"\n  end\nend\n</code></pre>\n<h3>トラック</h3>\n<p>トラックのチャンク構成は以下のようになっています．</p>\n<p><em>&#x3C;\"MTrk\"> &#x3C;データ長 (4)> &#x3C;データ本体> &#x3C;...残りのトラックデータ></em></p>\n<p><code>MidiParser</code>に各トラックのデータ本体のバイナリを取得する関数を追加します．</p>\n<pre><code class=\"hljs language-elixir\">defmodule MidiParser do\n\n  ...\n\n  def parse_track(data) do\n    _parse_track_chunk(data, [])\n  end\n\n  defp _parse_track_chunk(&#x3C;&#x3C;>>, acc) do\n    Enum.reverse(acc)\n  end\n\n  defp _parse_track_chunk(&#x3C;&#x3C;\n    \"MTrk\",\n    length :: size(32),\n    body :: binary - size(length),\n    chunks :: binary>>, tracks) do\n\n    _parse_track_chunk(chunks, [body | tracks])\n  end\nend\n</code></pre>\n<p>トラック部分のバイナリを渡して…</p>\n<pre><code class=\"hljs language-elixir\">iex(7)> tracks = MidiParser.parse_track(chunks)\n</code></pre>\n<p><code>tracks</code>はトラックの情報を持った binary のリストです．長さを調べると…</p>\n<pre><code class=\"hljs language-elixir\">iex(8)> length tracks\n20\n</code></pre>\n<p>20 トラック分のバイナリを取得出来ました．これからトラック情報をパースしていきます．</p>\n<p><em>&#x3C;データ本体></em> は以下のような構成です．</p>\n<p><em>&#x3C;デルタタイム> &#x3C;イベント> &#x3C;デルタタイム> &#x3C;イベント> &#x3C;デルタタイム> &#x3C;イベント>...</em></p>\n<p>デルタタイムは可変長バイト列です．先頭 1 ビットはフラグで残りの 7 ビット分が数値を表しています．MSB(Most Significant Byte)が 1 のとき，次のバイトもデルタタイムを表現していることになります．この表現方法を解釈する関数を定義してみました．</p>\n<pre><code class=\"hljs language-elixir\">def _extract_variable_length(&#x3C;&#x3C;msb :: 1, exp :: 7, _ :: binary>>) when msb == 0 do\n  &#x3C;&#x3C;exp :: 7>>\nend\n\ndef _extract_variable_length(&#x3C;&#x3C;_ :: 1, exp :: 7, rest :: binary>>) do\n  next = _extract_variable_length(rest)\n  &#x3C;&#x3C; &#x3C;&#x3C;exp :: 7>> :: bitstring, next :: bitstring >>\nend\n</code></pre>\n<p>これで数値部分の bitstring を抽出出来ました．バイト列に戻して値を抽出します．</p>\n<pre><code class=\"hljs language-elixir\">def extract_variable_length(data) do\n  bits = _extract_variable_length(data)\n  bs = bit_size(bits)\n  padding_size = 8 - rem(bs, 8)\n  byte_data = &#x3C;&#x3C; &#x3C;&#x3C;0 :: size(padding_size)>> :: bitstring, bits :: bitstring >>\n\n  bit_length = padding_size + bs\n  &#x3C;&#x3C;length :: size(bit_length)>> = byte_data\n  &#x3C;&#x3C;_ :: size(bit_length), chunks :: binary>> = data\n  {length, chunks}\nend\n</code></pre>\n<p>あとはイベントを解釈するコードを追加するのですが，長くなりそうなので続きは後日．\nソースコードは<a href=\"https://github.com/chooblarin/midi_parser\">こちら</a>に置きました．</p>\n<p>(追記: 2017/09/18)</p>\n<p>MIDI シーケンスに合わせてアニメーションする作品を公開しました．</p>\n<p>https://sotahatakeyama.com/#/color-ball-dancing/</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html\">Standard MIDI-File Format Spec. 1.1, updated</a></li>\n<li><a href=\"https://maruyama.breadfish.jp/tech/smf\">SMF(Standard MIDI File)フォーマット解説 | 技術的読み物 | FISH&#x26;BREAD</a></li>\n<li><a href=\"https://zohaib.me/binary-pattern-matching-in-elixir/\">Binary pattern matching in Elixir with PNG parsing example</a></li>\n</ul>"}},"__N_SSG":true}