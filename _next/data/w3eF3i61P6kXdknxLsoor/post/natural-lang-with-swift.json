{"pageProps":{"postContent":{"title":"NSLinguistic​Taggerで遊ぶ","date":"2016-08-14T21:34:14+09:00","slug":"natural-lang-with-swift","tags":["Swift"],"draft":false,"content":"<p><a href=\"https://realm.io/news/natural-language-processing-with-swift/\">\"Natural Language Processing with Swift\"</a>という素晴らしいトークを拝見しました．トークの中では，ナイーブベイズ分類器を用いた簡易のスパムフィルタの実装が説明されています．\nその中で<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSLinguisticTagger_Class/\"><code>NSLinguistic​Tagger</code></a>という便利なクラスを知り，気になったので触ってみました．(環境は Xcode 7.3.1, Swift 2.2 です．)</p>\n<h2>初期化する</h2>\n<p><code>NSLinguistic​Tagger</code>の初期には<code>tagSchemes</code>と<code>options</code>を渡します．\n型はそれぞれ<code>[String]</code>と<code>Int</code>です．</p>\n<p><code>NSLinguistic​Tagger</code>はなかなか多機能なやつで，<code>tagSchemes</code>には用途に応じたパラメータを渡すことになります．これは後ほど調べるとして，今はとにかくテキトーに初期化してみます．</p>\n<pre><code class=\"hljs language-Swift\"><span class=\"hljs-keyword\">let</span> tagger = <span class=\"hljs-type\">NSLinguisticTagger</span>(tagSchemes: [<span class=\"hljs-type\">NSLinguisticTagSchemeLexicalClass</span>], options: <span class=\"hljs-number\">0</span>)</code></pre>\n<p><code>tagSchemes</code>は LexicalClass，<code>options</code>は特に指定せずにインスタンスを取得出来ました．</p>\n<h2>試す</h2>\n<p>先ほど初期化した<code>NSLinguistic​Tagger</code>の簡単な使用例を見ていきます．</p>\n<pre><code class=\"hljs language-Swift\"><span class=\"hljs-keyword\">let</span> sentence = <span class=\"hljs-string\">\"I'm Spider-man.\"</span>\n<span class=\"hljs-keyword\">let</span> range = <span class=\"hljs-type\">NSRange</span>(location: <span class=\"hljs-number\">0</span>, length: sentence.characters.<span class=\"hljs-built_in\">count</span>)\n\ntagger.string = sentence\n\ntagger.enumerateTagsInRange(\n    range,\n    scheme: <span class=\"hljs-type\">NSLinguisticTagSchemeLexicalClass</span>,\n    options: .<span class=\"hljs-type\">OmitWhitespace</span>) { tag, tokenRange, <span class=\"hljs-number\">_</span>, <span class=\"hljs-number\">_</span> <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-keyword\">let</span> start = sentence.startIndex.advancedBy(tokenRange.location)\n        <span class=\"hljs-keyword\">let</span> end = sentence.startIndex.advancedBy(tokenRange.location + tokenRange.length)\n\n        <span class=\"hljs-keyword\">let</span> token = sentence.substringWithRange(start ..&#x3C; end)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\(token) (\\(tag))\"</span>)\n    }</code></pre>\n<p>出力結果は以下の通り．<code>()</code>の中身が<code>tagger</code>によって付加された tag です．</p>\n<pre><code class=\"hljs language-txt\">I (Pronoun)\n'm (Verb)\nSpider (Noun)\n- (Dash)\nman (Noun)\n. (SentenceTerminator)</code></pre>\n<p>このように文章の品詞分解が出来ました．</p>\n<h2>Tagging Schemes</h2>\n<p>Scheme の指定を変更することで様々な結果を得ることが出来ます．(上記の例では LexicalClass を指定しました．)</p>\n<p>英語のテキストに対して指定可能な Scheme の一覧は以下のように取得出来ます．</p>\n<pre><code class=\"hljs language-Swift\"><span class=\"hljs-keyword\">let</span> availableSchemes = <span class=\"hljs-type\">NSLinguisticTagger</span>.availableTagSchemesForLanguage(<span class=\"hljs-string\">\"en\"</span>)\n<span class=\"hljs-comment\">// => [\"TokenType\", \"Language\", \"Script\", \"Lemma\", \"LexicalClass\", \"NameType\", \"NameTypeOrLexicalClass\"]</span></code></pre>\n<p>試しに別な Scheme を指定して，先ほどのコードを実行してみます．（結果のみ）</p>\n<h3>TokenType</h3>\n<pre><code class=\"hljs language-txt\">I (Word)\n'm (Word)\nSpider (Word)\n- (Punctuation)\nman (Word)\n. (Punctuation)</code></pre>\n<h3>NameType</h3>\n<pre><code class=\"hljs language-txt\">I (OtherWord)\n'm (OtherWord)\nSpider (OtherWord)\n- (Dash)\nman (OtherWord)\n. (SentenceTerminator)</code></pre>\n<h3>Language</h3>\n<pre><code class=\"hljs language-txt\">I (en)\n'm (en)\nSpider (en)\n- ()\nman (en)\n. ()</code></pre>\n<p>と，このように異なる tagging がされていることが分かります．</p>\n<p>Tag Schemes の一覧は<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSLinguisticTagger_Class/#//apple_ref/doc/constant_group/Linguistic_Tag_Schemes\">公式ドキュメント</a>を確認して下さい．</p>\n<h2>Options</h2>\n<p>上記の例では OmitWhitespace を指定していたので空白の除去が行われていました．</p>\n<p>Options の一覧は<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSLinguisticTagger_Class/#//apple_ref/c/tdef/NSLinguisticTaggerOptions\">公式ドキュメント</a>を確認して下さい．</p>\n<p>句読点の除去を行う OmitPunctuation や\"New York\"などを一単語として扱う JoinNames などがあります．</p>\n<p>複数の option を指定したい場合は or 演算<code>|</code>を行います．</p>\n<pre><code class=\"hljs language-Swift\"><span class=\"hljs-keyword\">let</span> optionsRawValue: <span class=\"hljs-type\">UInt</span> =\n<span class=\"hljs-type\">NSLinguisticTaggerOptions</span>.<span class=\"hljs-type\">OmitWhitespace</span>.rawValue | <span class=\"hljs-type\">NSLinguisticTaggerOptions</span>.<span class=\"hljs-type\">JoinNames</span>.rawValue\n\n<span class=\"hljs-keyword\">let</span> optionsInt = <span class=\"hljs-type\">Int</span>(optionsRawValue)\n<span class=\"hljs-keyword\">let</span> options = <span class=\"hljs-type\">NSLinguisticTaggerOptions</span>(rawValue: optionsRawValue)</code></pre>\n<h2>遊ぶ</h2>\n<p>では最後にサンプルコードを掲載します．Playground でそのまま実行出来るはずです．</p>\n<pre><code class=\"hljs language-Swift\"><span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title\">NSRange</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rangeForString</span><span class=\"hljs-params\">(string: String)</span></span> -> <span class=\"hljs-type\">Range</span>&#x3C;<span class=\"hljs-type\">String</span>.<span class=\"hljs-type\">Index</span>>? {\n        <span class=\"hljs-keyword\">guard</span> location != <span class=\"hljs-type\">NSNotFound</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span> }\n        <span class=\"hljs-keyword\">let</span> start = string.startIndex.advancedBy(location)\n        <span class=\"hljs-keyword\">let</span> end = string.startIndex.advancedBy(location + length)\n        <span class=\"hljs-keyword\">return</span> start ..&#x3C; end\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> sentence1 = <span class=\"hljs-string\">\"With great power comes great responsibility.\"</span>\n<span class=\"hljs-keyword\">let</span> sentence2 = <span class=\"hljs-string\">\"In critical moments, men sometimes see exactly what they wish to see.\"</span>\n<span class=\"hljs-keyword\">let</span> sentence3 = <span class=\"hljs-string\">\"He can make the choice that no one else can make, the right choice.\"</span>\n\n<span class=\"hljs-keyword\">let</span> availableSchemes = <span class=\"hljs-type\">NSLinguisticTagger</span>.availableTagSchemesForLanguage(<span class=\"hljs-string\">\"en\"</span>)\n<span class=\"hljs-keyword\">let</span> optionsRawValue: <span class=\"hljs-type\">UInt</span> =\n    <span class=\"hljs-type\">NSLinguisticTaggerOptions</span>.<span class=\"hljs-type\">OmitWhitespace</span>.rawValue | <span class=\"hljs-type\">NSLinguisticTaggerOptions</span>.<span class=\"hljs-type\">JoinNames</span>.rawValue\n\n<span class=\"hljs-keyword\">let</span> tagger = <span class=\"hljs-type\">NSLinguisticTagger</span>(tagSchemes: availableSchemes, options: <span class=\"hljs-type\">Int</span>(optionsRawValue))\n\n<span class=\"hljs-keyword\">for</span> sentence <span class=\"hljs-keyword\">in</span> [sentence1, sentence2, sentence3] {\n    tagger.string = sentence\n\n    <span class=\"hljs-keyword\">let</span> range = <span class=\"hljs-type\">NSRange</span>(location: <span class=\"hljs-number\">0</span>, length: sentence.characters.<span class=\"hljs-built_in\">count</span>)\n    tagger.enumerateTagsInRange(\n        range,\n        scheme: <span class=\"hljs-type\">NSLinguisticTagSchemeNameTypeOrLexicalClass</span>,\n        options: <span class=\"hljs-type\">NSLinguisticTaggerOptions</span>(rawValue: optionsRawValue)) {\n            tag, tokenRange, sentenceRange, stop <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">let</span> token = sentence.substringWithRange(tokenRange.rangeForString(sentence)!)\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\(tag): \\(token)\"</span>)\n    }\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n}</code></pre>\n<hr>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSLinguisticTagger_Class/\">NSLinguisticTagger Class Reference</a></li>\n<li><a href=\"https://realm.io/jp/news/natural-language-processing-with-swift/\">Natural Language Processing with Swift</a></li>\n<li><a href=\"https://nshipster.com/nslinguistictagger/\">NSLinguisticTagger - NSHipster</a></li>\n</ul>\n"}},"__N_SSG":true}