{"pageProps":{"postContent":{"title":"TensorFlow入門以前","date":"2016-08-16T21:00:25+09:00","slug":"getting-started-tensorflow","tags":["Machine Leaning","TensorFlow"],"draft":false,"content":"<p>ずっと気になっていた<a href=\"https://www.tensorflow.org/\">TensorFlow</a>を触ってみました．\nTensorFlow の情報は既に Web 上で大量に溢れかえっていてとてもありがたかったです．\n<a href=\"https://qiita.com/search?q=tensorflow\">Qiita でのキーワード検索結果</a>は執筆時点で 472 件です．\n大いに参考にさせて頂きました．</p>\n<p>ちなみに私は少し前から機械学習をこそこそと勉強しているアプリエンジニアです．</p>\n<p>実験環境は下記．</p>\n<ul>\n<li>Python: <code>3.5.1</code></li>\n<li>TensorFlow: <code>0.10.0rc0</code></li>\n</ul>\n<p>※ニューラルネットワークはでてきません</p>\n<h2>TensorFlow の基礎知識</h2>\n<p>TensorFlow は一連の計算を<a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\">グラフ</a>で表現します．\n\"<strong>Operation</strong>\"と呼ばれるものがグラフのノードです．\nOperation は 0 個以上の計算対象を受け取って 0 個以上の計算結果を生成します．\n計算結果と計算対象は，<strong>Tensor</strong> と呼ばれる多次元配列です (物理や数学でのテンソルと同義)．\nTensor はグラフのエッジに相当します．\nこの Operation を複数つなぎ合わせて所望の結果を得るようです．\nこのようにグラフで表された計算を，実行するには，<strong>Session</strong> オブジェクトを利用します．\nまた，学習の状態を保存するために，<strong>Variable</strong> を使うようです．</p>\n<p>↓ ドキュメントをパラパラっと見てイメージを掴むと良さそうです．</p>\n<ul>\n<li><a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/framework.html#Graph\">Graph</a></li>\n<li><a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/framework.html#Operation\">Operations</a></li>\n<li><a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/framework.html#Tensor\">Tensors</a></li>\n<li><a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/client.html#Session\">Sessions</a></li>\n<li><a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/state_ops.html\">Variables</a></li>\n</ul>\n<h2>Introduction をやってみる</h2>\n<p><a href=\"https://www.tensorflow.org/versions/r0.10/get_started/index.html\">公式の GET STARTED</a>では\n一次関数 $y = Wx + b$ について，$W$ と $b$ を最小二乗法で求めるサンプルが公開されていました．\n（ちなみに $W$ は weight, $b$ は bias です．）</p>\n<p>上述の基礎知識を思い出しつつコードを眺めると，やっていることが大体理解出来ました．\n（ここでさっぱりイメージが湧かない人は，おそらく機械学習に関する知識が不足していますのでどこかで補いましょう．）</p>\n<h2>Example</h2>\n<p>Example の多くが<a href=\"https://yann.lecun.com/exdb/mnist/\">MNIST</a>の手書き数字画像を用いたものになっています．\n素晴らしい Example なのですがもう少し単純なもので試したい気もします．\n今回は<a href=\"https://archive.ics.uci.edu/ml/datasets/Iris\">Iris Data Set</a>を使います．\nアルゴリズムは機械学習で最も単純な<a href=\"https://ja.wikipedia.org/wiki/K%E8%BF%91%E5%82%8D%E6%B3%95\">最近傍法</a>を用います．</p>\n<p>下記は<a href=\"https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/2_BasicModels/nearest_neighbor.ipynb\">こちらのサンプルコード</a>を Iris 版に書きなおしたものです．</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> datasets\n\niris = datasets.load_iris()\n\nn_sample = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(iris.data)))\nrandom.seed(<span class=\"hljs-number\">0</span>)\nrandom.shuffle(n_sample)\n\nn_train = n_sample[:<span class=\"hljs-number\">100</span>]\nn_test = n_sample[<span class=\"hljs-number\">100</span>:]\n\nX_train = [iris.data[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> n_train]\nY_train = [iris.target[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> n_train]\n\nX_test = [iris.data[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> n_test]\nY_test = [iris.target[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> n_test]\n\nx_train = tf.placeholder(<span class=\"hljs-string\">\"float\"</span>, [<span class=\"hljs-literal\">None</span>, <span class=\"hljs-number\">4</span>])\nx_test = tf.placeholder(<span class=\"hljs-string\">\"float\"</span>, [<span class=\"hljs-number\">4</span>])\n\ndistance = tf.reduce_sum(tf.<span class=\"hljs-built_in\">abs</span>(tf.add(x_train, tf.neg(x_test))), reduction_indices=<span class=\"hljs-number\">1</span>)\nprediction = tf.arg_min(distance, <span class=\"hljs-number\">0</span>)\n\naccuracy = <span class=\"hljs-number\">0</span>\n\ninit = tf.initialize_all_variables()\n\n<span class=\"hljs-keyword\">with</span> tf.Session() <span class=\"hljs-keyword\">as</span> sess:\n    sess.run(init)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(X_test)):\n        nn_index = sess.run(prediction, feed_dict={x_train: X_train, x_test: X_test[i]})\n        pred = Y_train[nn_index]\n        cls = Y_test[i]\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Test\"</span>, i, <span class=\"hljs-string\">\"Prediction:\"</span>, pred, <span class=\"hljs-string\">\"True Class:\"</span>, cls)\n\n        <span class=\"hljs-keyword\">if</span> pred == cls:\n            accuracy += <span class=\"hljs-number\">1.</span>/<span class=\"hljs-built_in\">len</span>(X_test)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Done.\"</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy:\"</span>, accuracy)\n</code></pre>\n<p>実行結果</p>\n<pre><code class=\"hljs language-subunit\"><span class=\"hljs-keyword\">Test </span>0 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>1 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>2 Prediction: 2 True Class: 1\n<span class=\"hljs-keyword\">Test </span>3 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>4 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>5 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>6 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>7 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>8 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>9 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>10 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>11 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>12 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>13 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>14 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>15 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>16 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>17 Prediction: 2 True Class: 1\n<span class=\"hljs-keyword\">Test </span>18 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>19 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>20 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>21 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>22 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>23 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>24 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>25 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>26 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>27 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>28 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>29 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>30 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>31 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>32 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>33 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>34 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>35 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>36 Prediction: 2 True Class: 1\n<span class=\"hljs-keyword\">Test </span>37 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>38 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>39 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>40 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>41 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>42 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>43 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>44 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>45 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>46 Prediction: 1 True Class: 1\n<span class=\"hljs-keyword\">Test </span>47 Prediction: 0 True Class: 0\n<span class=\"hljs-keyword\">Test </span>48 Prediction: 2 True Class: 2\n<span class=\"hljs-keyword\">Test </span>49 Prediction: 1 True Class: 1\nDone.\nAccuracy: 0.94\n</code></pre>\n<p>今日はここまで．</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.tensorflow.org/\">TensorFlow — an Open Source Software Library for Machine Intelligence</a></li>\n<li><a href=\"https://qiita.com/yanosen_jp/items/70e6d6afc36e1c0a3ef3\">TensorFlow のキーコンセプト: Op ノード、セッション、変数 - Qiita</a></li>\n<li><a href=\"https://qiita.com/icoxfog417/items/fb5c24e35a849f8e2c5d\">TensorFlow を算数で理解する - Qiita</a></li>\n</ul>"}},"__N_SSG":true}