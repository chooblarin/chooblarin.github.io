{"pageProps":{"postContent":{"title":"p5.jsとBeat Detection","date":"2017-07-17T14:08:00+09:00","slug":"trying-beat-detection","tags":["p5.js","JavaScript"],"draft":false,"content":"<p>実は，兼ねてから JavaScript で絵を描く遊びが好きで，ふと思いたつと書いては<a href=\"https://chooblarin.tumblr.com\">Tumblr</a>に投稿している．この中の多くは<a href=\"https://p5js.org\">p5.js</a>を使って書いた．</p>\n<h2>音に合わせてなにかを動かしたい</h2>\n<p>p5.js には<a href=\"https://p5js.org/reference/#/libraries/p5.sound\">p5.sound library</a>という拡張がある．Web Audio API に関する知識はほとんど無いけどこれならすぐに試せそう．これを使って絵を動かしてみたくなった．</p>\n<p>オーディオの可視化に関しては以下の記事が大変参考になった．</p>\n<ul>\n<li><a href=\"https://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\">Making Audio Reactive Visuals — Airtight Interactive</a></li>\n</ul>\n<p>一般的に，以下の 4 つの要素が重要とのこと．</p>\n<ul>\n<li>Volume</li>\n<li>Waveform</li>\n<li>Level</li>\n<li>Beat Detection</li>\n</ul>\n<p>音に合わせて動かしたいので，上の記事の Beat Detection アルゴリズムをそのまま拝借．</p>\n<ol>\n<li>Volume の値を監視する．</li>\n<li>Volume の値が閾値を超えたときに Beat と判定し，閾値を Volume の値で更新．</li>\n<li>閾値は一定の割合(Decay Rate)で小さくなる．</li>\n<li>Beat の発生直後の一定時間(Hold Time)は閾値が減少しない．</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title hljs-class\">BeatDetector</span> {\n\n  <span class=\"hljs-title hljs-function\">constructor</span>(<span class=\"hljs-params\">holdTime, decayRate, minLevel</span>) {\n    <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">holdTime</span> = holdTime <span class=\"hljs-comment\">// the number of frames to hold a beat</span>\n    <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">decayRate</span> = decayRate\n    <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">minLevel</span> = minLevel <span class=\"hljs-comment\">// a volume less than this is no beat</span>\n\n    <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cutOff</span> = <span class=\"hljs-number\">0.0</span>\n    <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">time</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-title hljs-function\">detect</span>(<span class=\"hljs-params\">level</span>) {\n    <span class=\"hljs-keyword\">const</span> val = level || <span class=\"hljs-number\">0.0</span>\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">minLevel</span> &#x3C; val &#x26;&#x26; <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cutOff</span> &#x3C; val) {\n      <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cutOff</span> = val * <span class=\"hljs-number\">1.1</span>\n      <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">time</span> = <span class=\"hljs-number\">0</span>\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">time</span> &#x3C;= <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">holdTime</span>) {\n        <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">time</span> += <span class=\"hljs-number\">1</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">const</span> decayed = <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cutOff</span> * <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">decayRate</span>\n        <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cutOff</span> = <span class=\"hljs-title hljs-class\">Math</span>.<span class=\"hljs-title hljs-function\">max</span>(decayed, <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">minLevel</span>)\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n}\n</code></pre>\n<h2>Demo</h2>\n<p>p5.js を使ったサンプルは以下．5 つの周波数レンジ毎に Volume の値を取得して Beat Detection してみました．</p>\n<p>https://chooblarin.github.io/beat-detection-demo/</p>\n<p>以上です．引き続きよろしくお願いします．</p>"}},"__N_SSG":true}