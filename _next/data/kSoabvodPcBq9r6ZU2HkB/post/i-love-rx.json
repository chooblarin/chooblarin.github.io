{"pageProps":{"postContent":{"title":"ReactiveXが好き","date":"2018-06-07T21:00:00+09:00","slug":"i-love-rx","tags":["RxJS"],"draft":false,"content":"<p>実は最近，ブログを更新するチャレンジをしている．ブログを書くにはネタが無いんだけど言い訳として白状させて欲しい．これはブログチャレンジだ．</p>\n<div style=\"text-align:center;font-size:3rem;color:#bbb;\">...</div>\n<br>\n<p>3, 4 年ほど前，Android アプリの開発をしていた頃の RxJava に触れたのが僕の ReactiveX との出会いだ．</p>\n<ul>\n<li><a href=\"https://chooblarin.github.io/post/observable_is_my_friend\">Observable は友達 · chooblarin's blog</a></li>\n</ul>\n<p>Rx のパラダイムはあらゆる言語にも影響を与えた．僕は今，Web フロントエンドのエンジニアとして働いている．ReactiveX が強力な武器であることを実感する．</p>\n<h3>RxJS で遊ぶ</h3>\n<p>UI のプログラミングは，Rx と相性が良い．(UI イベントは全て非同期ストリームなので．)</p>\n<p>以下のデモのように，ドラッグ&#x26;ドロップも直感的に実装できる．</p>\n<p data-height=\"500\" data-theme-id=\"0\" data-slug-hash=\"wjmNLz\" data-default-tab=\"js,result\" data-user=\"chooblarin\" data-embed-version=\"2\" data-pen-title=\"RxJS 6 mouse drag with Spiderman\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/chooblarin/pen/wjmNLz/\">RxJS 6 mouse drag with Spiderman</a> by Sota Hatakeyama (<a href=\"https://codepen.io/chooblarin\">@chooblarin</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>こちらのデモは下記のスライドをみてつくった．</p>\n<p><a href=\"https://slides.com/davidkhourshid/agent-rxjs-css\">Reactive Animations with RxJS and CSS Variables by David Khourshid</a></p>\n<h3>非同期プログラミング (Promise, async/await)</h3>\n<p>JavaScript では，ES2015 に導入されるずっと前から Promise が使われていた．最近では async/await のコードをよく目にする．この前読んだ面白い記事を紹介したい．</p>\n<ul>\n<li><a href=\"https://staltz.com/promises-are-not-neutral-enough.html\">André Staltz - Promises are not neutral enough</a></li>\n</ul>\n<p>この記事を書いた Staltz さんは，<a href=\"https://github.com/cyclejs/cyclejs\">Cycle.js</a> の作者でもあり，<a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">Rx の有名な (おそらく最も有名) 入門記事</a>の筆者でもある．</p>\n<p>彼は記事の中で Promise についてこう述べている．</p>\n<blockquote>\n<p>Basically Promises are not neutral enough because they introduce 4 opinions:</p>\n</blockquote>\n<ul>\n<li>Eager, not lazy</li>\n<li>No cancellation</li>\n<li>Never synchronous</li>\n<li>then() is a mix of map() and flatMap()</li>\n</ul>\n<p>Promise が opinionated である(Staltz 氏曰く)理由について，いくつかみてみようと思う．</p>\n<br>\n<h4>Promise は即時評価</h4>\n<p>Promise を作成するとにに渡すコールバックは即時評価である．<code>then()</code> を呼び出す前に評価される．</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"hello\"</span>);\n});\n</code></pre>\n<p>一方，RxJS についてみてみる (以下のコード)．</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> observable = <span class=\"hljs-title class_\">Observable</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">subscriber</span> =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"hello\"</span>);\n});\n</code></pre>\n<p>上記の方法で作成した Observable は Cold Observable である．<code>subscribe()</code> するまで <code>hello</code> はコンソール出力されません．(但し，<code>subscribe()</code> の度に実行される．)</p>\n<br>\n<h4>Promise はキャンセルできない</h4>\n<p>Promise にはキャンセルの術がない．</p>\n<p>あまり関係が無いけどキャンセル処理といえば，以下のトークがおすすめ．RxJS ならキャンセル処理をエレガントに実装することが出来る．</p>\n<p><a href=\"https://www.youtube.com/watch?v=AslncyG8whg\">YouTube - Netflix JavaScript Talks - RxJS + Redux + React = Amazing!</a></p>\n<br>\n<h4>then() の振る舞い</h4>\n<p>Promise の<code>then</code>の振る舞いについて，以下のコードをみて欲しい．</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"hello\"</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${x}</span>!!`</span>);\n<span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"hello\"</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${x}</span>!!`</span>));\n</code></pre>\n<p><code>promise1</code> と <code>promise2</code> は同じ値 <code>hello!!</code> を表す．更には...</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> promise3 = <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">\"hello\"</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span>\n  <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${x}</span>!!`</span>)))\n);\npromise3.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n<span class=\"hljs-comment\">// > hello!!</span>\n</code></pre>\n<p>...どんなに包んでも同じである．この振る舞いはそこまで自明ではないと思う．例えば以下のような誤解もみられる．</p>\n<ul>\n<li><a href=\"https://dev.to/jgs/javascript--asyncawait---2l41\">JavaScript の async/await の仕様をずっと誤解していた</a></li>\n</ul>\n<h3>おわり 👋</h3>\n<p>RxJS で遊ぶと楽しい．（でも正直，RxJS の <code>pipe()</code> は面倒くさい．<code>|></code> まだかなあ...)</p>"}},"__N_SSG":true}